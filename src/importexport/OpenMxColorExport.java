/*
* Copyright 2023 by Timo von Oertzen and Andreas M. Brandmaier
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package importexport;

import importexport.filters.RFileFilter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import engine.ParameterReader;

import gui.Desktop;
import gui.graph.Edge;
import gui.graph.Graph;
import gui.graph.Node;
import gui.linker.DatasetField;
import gui.linker.LinkHandler;
import gui.views.ModelView;

public class OpenMxColorExport extends RExport {

	public static final int LABEL = 3, TO = 2;


	public String getHeader() {return "OpenMx code";}
	
    public boolean isValid() {return !modelView.hasDefinitionEdges();}

	public OpenMxColorExport(ModelView modelView) {
		super(modelView, new RFileFilter(),new String[] {"R","r"});
		
		useStartingValues = true;
	}

	
	public String convert(String s)
	{
		//return s.replaceAll("/[^A-Za-z0-9\\(\\) ]/", "_");
		return s.replaceAll("[^A-Za-z0-9]", "_");

	}
	

	@Override
	public String createModelSpec(ModelView modelView, String modelName, boolean useUniqueNames)
	{
	    Graph g = modelView.getGraph();
		resetNames();
		
		String modelVariable = "model";
	//	String modelName = "ONYX model";
		

		
		String mstr = "";
		String lstr = "";
		
//		for (int i=0; i < g.ge)
		Iterator<Node> iterNode = g.getNodeIterator();
		while(iterNode.hasNext()) {
			Node node = iterNode.next();
			if (!node.isMeanTriangle())
			if (node.isLatent()) {
				if (lstr != "") { lstr=lstr+",";}
				lstr=lstr+"\""+makeSaveString(node.getUniqueName(useUniqueNames))+"\"";
			} else {
				if (mstr != "") { mstr=mstr+",";}
				mstr=mstr+"\""+makeSaveString(node.getUniqueName(useUniqueNames))+"\"";
			}
		}
		
		String manifests = "manifests<-c("+mstr+")";
		String latents = "latents<-c("+lstr+")";
		
		String output = "#\n# This model specification was automatically generated by Onyx\n" +
				"# \n"+
				"require(\"OpenMx\");\n"+
				manifests+"\n"+latents+"\n"+
				modelVariable+" <- mxModel(\""+makeSaveString(modelName)+"\", \n"+
			"type=\"RAM\",\n"+
			"manifestVars = manifests,\n"+
			"latentVars = latents";
		
			boolean withMeans = false;
		
			// create edges

		
			// create all regression edges
			for (Node source : g.getNodes())
			{
				// collect all outgoing edges (regressions)
				List<Edge> e = new ArrayList<Edge>();
				
				for (Edge edge : g.getEdges()) {
					if (edge.isDoubleHeaded()) continue;
					if (edge.getSource()==source) e.add(edge);
				}
				
				// create Omx path
				String from = "";
				String to = "";
				String free = "";
				String value = "";
				String arrows = "";
				String label = "";
				if (source.isMeanTriangle()) {
					from = "one";
					withMeans= true;
				} else {
					from = source.getUniqueName(useUniqueNames);
				}
				
				if (e.isEmpty()) continue;
				
				free = combine(e, 0);
				value = combine(e, 1);
				arrows = "1";
				to = combine(e, TO);
				label = combine(e, LABEL);
				

				
				String edgeString = ",\nmxPath(from=\""+ makeSaveString(from)+"\",to="+to+
						", free="+free+", value="+value+" "+
						", arrows="+arrows+ ", label="+label+" )";
				output+=edgeString;
				
			}
			
			// create all covariance / variance edges
			for (Node source : g.getNodes())
			{
				// collect all outgoing edges (regressions)
				List<Edge> e = new ArrayList<Edge>();
				
				for (Edge edge : g.getEdges()) {
					if (!edge.isDoubleHeaded()) continue;
					if (edge.getSource()==source) e.add(edge);
				}
				
				// create Omx path
				String from = "";
				String to = "";
				String free = "";
				String value = "";
				String arrows = "";
				String label = "";
				if (source.isMeanTriangle()) {
					from = "one";
					withMeans= true;
				} else {
					from = source.getUniqueName(useUniqueNames);
				}
				
				if (e.isEmpty()) continue;
				
				free = combine(e, 0);
				value = combine(e, 1);
				arrows = "2";
				to = combine(e, 2);
				label = combine(e, 3);
				
				String edgeString = ",\nmxPath(from=\""+makeSaveString(from)+"\",to="+to+
						", free="+free+", value="+value+" "+
						", arrows="+arrows+ ", label="+label+" )";
				output+=edgeString;
				
			}			
			
/*			
			if (withData) {
				
				if (withMeans) {
					output+=",\nmxData(data,type=\"raw\")\n"; 
				} else {
					output+=",\nmxData(cov(data),type=\"cov\",numObs="+data.length+" )\n";
				}
			}
	*/		
			output+="\n);";	//close model definition
			
			return("<html>"+output+"</html>");
		
	}
	
	private String combine(List<Edge> list, int type) {
		
		ParameterReader startingValues = modelView.getModelRequestInterface().getStartingValuesUnit();

		 StringBuilder sb = new StringBuilder();
		 sb.append("c(");
		   boolean first = true;
		   for (Edge item : list)
		   {
		      if (first)
		         first = false;
		      else
		         sb.append(',');
		      
		      sb.append("<p color='"+Export.colorToHexString(item.getLineColor())+"'>");
		      
		      if (type==0) {
		    	  if (item.isFree()) {
		    	  sb.append("TRUE");
		    	  } else {
		    		  sb.append("FALSE");
		    	  }
		      } else if (type==1) {
		    	  if (useStartingValues && item.isFree()) {
		    		  sb.append(startingValues.getParameterValue(item.getParameterName()));
		    	  } else {
		    		  sb.append(item.getValue());
		    	  }
		      } else if (type == TO)
		      {
		    
		    		  sb.append("\""+makeSaveString(item.getTarget().getCaption())+"\"");
		    	  //}
		      } else if (type == LABEL) {
		    	  if (item.isDefinitionVariable()) {
		    		  sb.append( "\"data."+item.getParameterName()+"\"");
		    	  } else {
		    		  sb.append( "\""+makeSaveString(item.getParameterName())+"\"");
		    	  }
		    	}
		      
		      sb.append("</p>");
		      
		   }
		   
		   sb.append(')');
		   return sb.toString();
		   
		   
	}

	/**@Deprecated
	*/
	public String exportNaive(Graph g)
	{
		String modelVariable = "model";
		String modelName = "ONYX model";
		
		String mstr = "";
		String lstr = "";
		
//		for (int i=0; i < g.ge)
		Iterator<Node> iterNode = g.getNodeIterator();
		while(iterNode.hasNext()) {
			Node node = iterNode.next();
			if (!node.isMeanTriangle())
			if (node.isLatent()) {
				if (lstr != "") { lstr=lstr+",";}
				lstr=lstr+"\""+node.getCaption()+"\"";
			} else {
				if (mstr != "") { mstr=mstr+",";}
				mstr=mstr+"\""+node.getCaption()+"\"";
			}
		}
		
		String manifests = "manifests<-c("+mstr+")";
		String latents = "latents<-c("+lstr+")";
		
		String output = "#\n# This RAM specification was automatically generated by Onyx" +
				"# \n"+
				"require(\"OpenMx\");\n"+
				manifests+"\n"+latents+"\n"+
				modelVariable+" <- mxModel(\""+modelName+"\", \n"+
			"type=\"RAM\",\n"+
			"manifestVars = manifests,\n"+
			"latentVars = latents,\n";
		
			boolean withMeans = false;
		
			Iterator<Edge> iter = g.getEdgeIterator();
			while(iter.hasNext())  
			{
				Edge edge = iter.next();
				String from = "";
				String to = "";
				String free = "";
				String value = "";
				String arrows = "";
				
				if (edge.getSource().isMeanTriangle()) {
					from = "one";
					withMeans= true;
				} else {
					from = edge.getSource().getCaption();
				}
				
				to = edge.getTarget().getCaption();
				
				value = Double.toString(edge.getValue());
				
				if (edge.isDoubleHeaded()) {
					arrows = "2";
				} else {
					arrows = "1";
				}
				
				if (edge.isFixed()) {
					free = "F";
				} else {
					free = "T";
				}
				
				String label = edge.getParameterName();
				
				String edgeString = "mxPath(from=\""+from+"\",to=\""+to+
						"\", free="+free+", value="+value+" "+
						", arrows="+arrows+ ", label=\""+label+"\" )";
				
				if (iter.hasNext()) edgeString+=",\n";
				
				output+=edgeString;
			}	
/*			
			if (withData) {
				
				if (withMeans) {
					output+=",mxData(data,type=\"raw\")\n"; 
				} else {
					output+=",mxData(cov(data),type=\"cov\",numObs="+data.length+" )\n";
				}
			}
*/			
			output+=");";	//close model definition
			
			return(output);
		
	}
	
}
