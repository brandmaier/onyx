/*
* Copyright 2023 by Timo von Oertzen and Andreas M. Brandmaier
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*
 * Created on 11.03.2014
 */
package importexport;

import gui.graph.*;
import gui.graph.Graph.MeanStyle;
import gui.views.*;
import importexport.filters.RFileFilter;
import importexport.filters.TextFileFilter;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class SemExport extends RExport {

    public boolean useFIML;
    
    public SemExport(ModelView modelView) {
        super(modelView);
    }

    @Override
    public String getHeader() {return "sem package code";}
    
    public boolean isValid() {return !modelView.hasDefinitionEdges();}
    
    @Override 
    public String makeSaveString(String name, VariableContainer container) {
        if (name.equals("Intercept")) return super.makeSaveString("__Intercept__", container);
        else return super.makeSaveString(name, container);
    }
    
    @Override
    public String createModelSpec(ModelView modelView, String modelName, boolean useUniqueNames) {
        Graph g = modelView.getGraph();
        if (!checkModel(g)) return "Model is not valid for export to "+getHeader()+".";
        List<Edge> edges = g.getEdges();
        List<String[]> entries = new ArrayList<String[]>();
        boolean meanTriangleExists = false;
        for (Edge edge:edges) {
            String path = "\""+
            		(edge.getSource().isMeanTriangle()?"Intercept":(
                makeSaveString(edge.getSource().getUniqueName(useUniqueNames), edge.getSource().getObservedVariableContainer())))
                +" "+
                    (edge.isDoubleHeaded()?"<->":"->") +" "+makeSaveString(edge.getTarget().getUniqueName(useUniqueNames),edge.getTarget().getObservedVariableContainer())
                    +"\"";
            String parameter = (edge.isFree()?"\""+makeSaveString(edge.getParameterName())+"\"":"NA");
            String starting = "\""+edge.getValue()+"\"";
            entries.add(new String[]{path,parameter,starting});
            if (edge.getSource().isMeanTriangle()) meanTriangleExists = true;
        }
        if (g.getMeanTreatment() == Graph.MeanTreatment.explicit && !meanTriangleExists) {
            List<Node> nodes = g.getNodes();
            for (Node node:nodes) if (node.isObserved()) {
                entries.add(new String[]{"\"Intercept -> "+makeSaveString(node.getUniqueName(useUniqueNames),node.getObservedVariableContainer())+"\"", "NA", "\"0.0\""});
            }
        }
        
        String erg = "#\r\n# This model specification was automatically generated by Onyx\n" +
                "# \r\n"+
                "require(\"sem\");\r\n"+
                "modelData <- read.table("+DATAFILENAME+", header = TRUE)\r\n"+
                "paths <- c(";
        for (int i=0; i<entries.size(); i++) erg += entries.get(i)[0]+(i==entries.size()-1?")\r\n":", ");
        erg += "parameter <- c(";
        for (int i=0; i<entries.size(); i++) erg += entries.get(i)[1]+(i==entries.size()-1?")\r\n":", ");
        erg += "values <- c(";
        for (int i=0; i<entries.size(); i++) erg += entries.get(i)[2]+(i==entries.size()-1?")\r\n":", ");
        erg += "model <- array(c(paths, parameter, values), dim = c("+entries.size()+",3))\r\n"
            +  "colnames(model) <- c(\"col1\",\"col2\",\"col3\")\r\n";
        
        String deviationFromDefault = "";
        if (g.getMeanTreatment() == Graph.MeanTreatment.explicit) deviationFromDefault +=", fixed.x = \"Intercept\", raw = TRUE";
        if (useFIML) deviationFromDefault += ", na.action = na.pass, objective = objectiveFIML";
        
//               erg += "result <- sem(model = model, data = dat, fixed.x = \"Intercept\", raw = TRUE)\r\n";
        erg += "result <- sem(model = model, data = modelData"+deviationFromDefault+")\r\n";
        erg += "summary(result)\r\n";
        
        return erg;
    }
    
    public boolean checkModel(Graph g) {
        for (Edge e:g.getEdges()) if (e.isDefinitionVariable()) return false;
        for (Node n:g.getNodes()) if (n.isGrouping()) return false;
        return true;
    }

    @Override
    public void export(File file) {
        Graph g = modelView.getGraph();

        String content = createModelSpec(modelView, modelView.getModelRequestInterface().getName(), false);
        
        try {
            createFile(file, content);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
